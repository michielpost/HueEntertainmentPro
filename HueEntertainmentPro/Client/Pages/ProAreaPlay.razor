@page "/play/{Id:guid}"
@using HueEntertainmentPro.Shared.Interfaces
@using HueEntertainmentPro.Shared.Models
@using HueEntertainmentPro.Shared.Models.Requests
@using HueLightDJ.Services.Interfaces
@using HueLightDJ.Services.Interfaces.Models
@using HueLightDJ.Services.Interfaces.Models.Requests;

@inject IBridgeDataService BridgeService
@inject IProAreaDataService ProAreaDataService
@inject IHueSetupService HueSetupService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IToastService ToastService
@inject ILightDJService LightDJService
@inject IHubService HubService

<h3>Pro Entertainment Area</h3>

@if (errorMessage != null)
{
    <FluentMessageBar Intent="MessageIntent.Error" Style="margin-bottom: 16px;">
        @errorMessage
    </FluentMessageBar>
}

@if (proArea != null)
{
    <FluentStack Orientation="Orientation.Vertical" Gap="10">
        <FluentLabel Typo="Typography.Header">Name: @proArea.Name</FluentLabel>
        <FluentStack Orientation="Orientation.Horizontal" Gap="10">
            @*   <FluentButton Appearance="Appearance.Accent" @onclick="ShowEditNameDialog">Edit Name</FluentButton>
            <FluentButton Appearance="Appearance.Neutral" @onclick="ShowDeleteConfirmation">Delete Area</FluentButton> *@
        </FluentStack>
    </FluentStack>


    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>

    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">

        <FluentCard Class="d-flex flex-row flex-grow-1 gap-4">
            <FluentLabel>Log msg: @lastMsg</FluentLabel>
        </FluentCard>

        @if (statusModel.CurrentGroup == null)
        {
            <FluentButton Appearance="Appearance.Accent" OnClick="Connect">Connect</FluentButton>

        }
    </FluentStack>


    @if (statusModel.CurrentGroup != null) //statusModel.IsConnected
    {
        <FluentGrid AdaptiveRendering="true" Justify="JustifyContent.FlexStart" Columns="3" ColumnGap="10" RowGap="10">
          <FluentGridItem xs="12" sm="12">
            <HueEntertainmentPro.Client.Shared.PixiPreview />
          </FluentGridItem>

            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentHeader>Control</FluentHeader>
                    <FluentStack Orientation="Orientation.Vertical">

                        <FluentButton Appearance="Appearance.Accent" OnClick="Disconnect">Disconnect</FluentButton>


                        <FluentLabel>BPM</FluentLabel>
                        <FluentNumberField Value="@statusModel.Bpm" Label="BPM" ValueChanged="@((int? value) => LightDJService.SetBPM(new IntRequest(value ?? 0)))" Min="1" Max="1000" />

                        <FluentButton Appearance="Appearance.Accent" OnClick="(() => LightDJService.SetBPM(new IntRequest(120)))">Reset BPM</FluentButton>

                        <FluentStack Orientation="Orientation.Horizontal">

                            <FluentButton OnClick="(() => LightDJService.SetBPM(new IntRequest(20)))">Slow</FluentButton>
                            <FluentButton OnClick="(() => LightDJService.SetBPM(new IntRequest(400)))">Quick</FluentButton>
                            <FluentButton OnClick="(() => LightDJService.SetBPM(new IntRequest(600)))">Super Quick</FluentButton>

                        </FluentStack>
                        <FluentDivider></FluentDivider>

                        <FluentSlider Value="@Brightness" ValueChanged="@((double value) => { Brightness = value; LightDJService.SetBri(new DoubleRequest(value)); })" Min="0" Max="100" Step="1" Label="Brightness"></FluentSlider>
                        <FluentLabel>Brightness: @Brightness</FluentLabel>

                    </FluentStack>
                </FluentCard>
            </FluentGridItem>


            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentHeader>Effects</FluentHeader>
                    <FluentStack Orientation="Orientation.Vertical">

                        <FluentButton Appearance="Appearance.Accent" OnClick="(() => LightDJService.StartRandom())">Random Effect</FluentButton>

                        @if (statusModel.IsAutoMode)
                        {
                            <FluentCheckbox Value="@statusModel.AutoModeHasRandomEffects" ValueChange="@((bool value) => { statusModel.AutoModeHasRandomEffects = value; LightDJService.SetAutoRandomMode(new BoolRequest(value)); })" Label="Random effects"></FluentCheckbox>

                            <FluentButton Appearance="Appearance.Accent" OnClick="(() => LightDJService.StopAutoMode())">Stop Auto Mode</FluentButton>
                        }
                        else
                        {
                            <FluentButton Appearance="Appearance.Accent" OnClick="(() => LightDJService.StartAutoMode())">Start Auto Mode</FluentButton>
                        }
                        <FluentButton Appearance="Appearance.Accent" OnClick="(() => LightDJService.StopEffects())">Stop All Effects</FluentButton>
                        <FluentButton Appearance="Appearance.Accent" OnClick="(() => LightDJService.Beat(new DoubleRequest(1)))">Beat</FluentButton>

                    </FluentStack>
                </FluentCard>
            </FluentGridItem>

            @* <FluentHeader>Long Running</FluentHeader> *@
            @foreach (var effectGroup in effectsVM.BaseEffects)
            {
                <FluentGridItem xs="6" sm="3">
                    <FluentCard>
                        <FluentHeader>@effectGroup.Title</FluentHeader>

                        <FluentStack Orientation="Orientation.Vertical">
                            @foreach (var effect in effectGroup.Effects)
                            {
                                <FluentButton OnClick="@(() => LightDJService.StartEffect(new StartEffectRequest { TypeName = effect.TypeName, ColorHex = effect.IsRandom ? null : effect.Color }))">@effect.Name</FluentButton>

                                @if (effect.HasColorPicker)
                                {
                                    <FluentCheckbox Value="@effect.IsRandom" ValueChanged="@((bool value) => effect.IsRandom = value)" Label="Random"></FluentCheckbox>

                                    @if (!effect.IsRandom)
                                    {
                                        <input type="color" @bind="effect.Color" @bind:event="oninput" />
                                    }
                                }

                            }
                        </FluentStack>


                    </FluentCard>
                </FluentGridItem>
            }

            <FluentGridItem xs="6" sm="3">
                <FluentCard>

                    <FluentHeader>Short Effects</FluentHeader>

                    <FluentStack Orientation="Orientation.Vertical">

                        @foreach (var effect in effectsVM.ShortEffects)
                        {
                            <FluentButton OnClick="@(() => LightDJService.StartEffect(new StartEffectRequest { TypeName = effect.TypeName, ColorHex = "" }))">@effect.Name</FluentButton>
                        }
                    </FluentStack>

                </FluentCard>
            </FluentGridItem>

        </FluentGrid>
    }

}
else
{
    <FluentProgressRing>Loading area details...</FluentProgressRing>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ProArea? proArea;
    private string? errorMessage;

    GroupConfiguration? config;

    private string lastMsg = string.Empty;
    private StatusModel statusModel = new();
    private EffectsVM effectsVM = new();
    private double Brightness = 100;


    protected override async Task OnParametersSetAsync()
    {
        statusModel = await LightDJService.GetStatus();

        effectsVM = await LightDJService.GetEffects();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        HubService.LogMsgEvent += HubService_LogMsgEvent;
        HubService.StatusChangedEvent += HubService_StatusChangedEvent;

        try
        {
            // Load area details
            proArea = await ProAreaDataService.GetProArea(new GuidRequest() { Id = Id });
            if (proArea == null)
            {
                errorMessage = "Area not found.";
                return;
            }

            if (!proArea.Connections.Any())
            {
                errorMessage = "No entertainment groups connected to this area. Please add some in the area details page.";
            }

            config = new GroupConfiguration
            {
                Name = proArea.Name,
                Id = proArea.Id,
                Connections = proArea.Connections.Select(x => new ConnectionConfiguration
                {
                    EntertainmentKey = x.Bridge.StreamingClientKey,
                    GroupId = x.GroupId,
                    Ip = x.Bridge.Ip,
                    Key = x.Bridge.Username,
                    UseSimulator = false
                }).ToList()
            };

            if (config == null)
            {
                Console.WriteLine("Has group: " + statusModel.CurrentGroup != null);
                if (Id == statusModel.CurrentGroup?.Id)
                {
                    config = statusModel.CurrentGroup;
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load area details: {ex.Message}";
        }
    }

    private async void HubService_StatusChangedEvent(object? sender, EventArgs e)
    {
        await GetStatusAsync();
    }

    private void HubService_LogMsgEvent(object? sender, string? e)
    {
        lastMsg = e ?? string.Empty;
    }

    private async Task GetStatusAsync()
    {
        statusModel = await LightDJService.GetStatus();
        //StateHasChanged();
        Console.WriteLine(statusModel.Bpm);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    public async Task Connect()
    {
        await LightDJService.Connect(config);

        statusModel = await LightDJService.GetStatus();
        this.InvokeAsync(() => this.StateHasChanged());

    }

    public async Task Disconnect()
    {
        await LightDJService.Disconnect();
        this.InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        HubService.LogMsgEvent -= HubService_LogMsgEvent;
        HubService.StatusChangedEvent -= HubService_StatusChangedEvent;
    }

}
