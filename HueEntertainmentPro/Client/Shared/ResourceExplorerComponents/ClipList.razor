@using HueApi
@using HueApi.Models
@using HueEntertainmentPro.Client.Services
@inject NavigationManager NavigationManager
@inject ResourceExplorerService ResourceExplorerService

@if (Bridge != null && (Clips?.Any() ?? false))
{
    <FluentBreadcrumb>
        <FluentBreadcrumbItem Href="/resource-explorer">
            Bridges
        </FluentBreadcrumbItem>
        <FluentBreadcrumbItem>
            API list
        </FluentBreadcrumbItem>
    </FluentBreadcrumb>

    <h3>API List</h3>

    <FluentNavLink Href="@ResourceExplorerService.CreateResourceLink(Bridge.Id, "all")">all</FluentNavLink>

    @foreach (var clip in Clips.First().Resources)
    {
        <FluentNavLink Href="@ResourceExplorerService.CreateResourceLink(Bridge.Id, clip)">@clip</FluentNavLink>
    }
}
else
{
    <FluentProgressRing>Loading resources...</FluentProgressRing>
}

@code {
    [Parameter]
    public HueEntertainmentPro.Shared.Models.Bridge? Bridge { get; set; }

    private List<ClipResource>? Clips = null;

    protected override async Task OnParametersSetAsync()
    {
        if (Bridge != null)
        {
            var localHueApi = ResourceExplorerService.GetHueClient(Bridge);
            var clips = await localHueApi.GetClipsAsync();

            Clips = clips.Data;
        }
    }
}
