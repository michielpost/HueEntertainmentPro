@using HueApi
@using HueApi.Models
@using HueEntertainmentPro.Client.Services
@inject NavigationManager NavigationManager
@inject ResourceExplorerService ResourceExplorerService

@if (Bridge != null && HueResources != null)
{

    <FluentBreadcrumb>
        <FluentBreadcrumbItem Href="/resource-explorer">
            Bridges
        </FluentBreadcrumbItem>
        <FluentBreadcrumbItem Href="@ResourceExplorerService.CreateResourceLink(Bridge.Id, null)">
            @Bridge.Name (@Bridge.Ip)
        </FluentBreadcrumbItem>
        <FluentBreadcrumbItem>
           @Rtype
        </FluentBreadcrumbItem>
    </FluentBreadcrumb>

    <h3>Resource List (@HueResources.Count())</h3>

    @if (!HueResources.Any())
    {
        <p>No resources found.</p>
    }

    @foreach (var resource in HueResources)
    {
        <FluentNavLink Href="@ResourceExplorerService.CreateResourceLink(Bridge.Id, resource.Type, resource.Id)">@resource.Type - @resource.Id</FluentNavLink>
    }
}
else
{
    <FluentProgressRing>Loading resources...</FluentProgressRing>
}

@code {
    [Parameter]
    public HueEntertainmentPro.Shared.Models.Bridge? Bridge { get; set; }

    [Parameter]
    public required string Rtype { get; set; }


    private List<HueResource>? HueResources = null;

    protected override async Task OnParametersSetAsync()
    {
        if (Bridge != null)
        {
            var localHueApi = ResourceExplorerService.GetHueClient(Bridge);

            if(Rtype == "all")
            {
                var resources = await localHueApi.GetResourcesAsync();
                HueResources = resources.Data;
            }
            else
            {
                var resources = await localHueApi.GetResourceAsync(Rtype);
                HueResources = resources.Data;
            }
            
        }
    }
}
